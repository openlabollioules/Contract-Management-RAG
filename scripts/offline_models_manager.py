#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script pour g√©rer les mod√®les offline de Marker/Surya.
Ce script peut:
1. Capturer les mod√®les t√©l√©charg√©s automatiquement par Surya et les copier dans notre r√©pertoire offline_models
2. Forcer le t√©l√©chargement des mod√®les manquants
3. V√©rifier l'int√©grit√© des mod√®les locaux
"""

import logging
import os
import shutil
import sys
from pathlib import Path

from dotenv import load_dotenv

# Configuration du logger
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("./logs/offline_models_manager.log"),
    ],
)
logger = logging.getLogger("offline_models_manager")

# Chemin du cache Datalab (o√π Surya stocke ses mod√®les)
DATALAB_CACHE_DIR = Path.home() / "Library" / "Caches" / "datalab" / "models"

# Liste des mod√®les Surya avec leurs chemins de cache et noms correspondants dans offline_models
SURYA_MODELS = {
    "layout": {
        "cache_path": DATALAB_CACHE_DIR / "layout",
        "version_folder": "2025_02_18",
        "target_folder": "layout",
    },
    "texify": {
        "cache_path": DATALAB_CACHE_DIR / "texify",
        "version_folder": "2025_02_18",
        "target_folder": "texify",
    },
    "text_recognition": {
        "cache_path": DATALAB_CACHE_DIR / "text_recognition",
        "version_folder": "2025_02_18",
        "target_folder": "text_recognition",
    },
    "table_recognition": {
        "cache_path": DATALAB_CACHE_DIR / "table_recognition",
        "version_folder": "2025_02_18",
        "target_folder": "table_recognition",
    },
    "text_detection": {
        "cache_path": DATALAB_CACHE_DIR / "text_detection",
        "version_folder": "2025_02_28",
        "target_folder": "text_detection",
    },
    "inline_math_detection": {
        "cache_path": DATALAB_CACHE_DIR / "inline_math_detection",
        "version_folder": "2025_02_24",
        "target_folder": "inline_math_detection",
    },
    "ocr_error_detection": {
        "cache_path": DATALAB_CACHE_DIR / "ocr_error_detection",
        "version_folder": "2025_02_18",
        "target_folder": "ocr_error",  # Nom diff√©rent dans offline_models
    },
}


def ensure_directory_exists(directory):
    """S'assure qu'un r√©pertoire existe, le cr√©e sinon"""
    Path(directory).mkdir(parents=True, exist_ok=True)
    logger.debug(f"‚úÖ R√©pertoire v√©rifi√©: {directory}")


def check_model_directory(directory):
    """V√©rifie si un r√©pertoire de mod√®le contient des fichiers valides"""
    path = Path(directory)
    if not path.exists():
        return False, "Le r√©pertoire n'existe pas"

    # V√©rifier s'il y a des fichiers dans le r√©pertoire
    files = list(path.glob("*"))
    if not files:
        return False, "Le r√©pertoire est vide"

    # V√©rifier s'il y a des fichiers mod√®les sp√©cifiques
    model_files = (
        list(path.glob("*.safetensors"))
        + list(path.glob("*.bin"))
        + list(path.glob("*.pt"))
    )
    config_files = list(path.glob("config.json")) + list(
        path.glob("preprocessor_config.json")
    )
    manifest_files = list(path.glob("manifest.json"))

    if not model_files and not config_files:
        return (
            False,
            "Aucun fichier mod√®le trouv√© (.safetensors, .bin, .pt, config.json)",
        )

    # Le mod√®le semble valide
    return (
        True,
        f"{len(model_files) + len(config_files) + len(manifest_files)} fichiers mod√®le trouv√©s",
    )


def copy_model_files(source_dir, target_dir):
    """Copie les fichiers d'un mod√®le du cache vers le r√©pertoire offline"""
    source_dir = Path(source_dir)
    target_dir = Path(target_dir)

    if not source_dir.exists():
        logger.warning(f"‚ö†Ô∏è R√©pertoire source {source_dir} n'existe pas")
        return False

    ensure_directory_exists(target_dir)

    files_copied = 0
    try:
        for file in source_dir.glob("*"):
            if file.is_file():
                shutil.copy2(file, target_dir)
                logger.debug(f"Copi√©: {file.name}")
                files_copied += 1

        logger.info(
            f"‚úÖ {files_copied} fichiers copi√©s de {source_dir} vers {target_dir}"
        )
        return True if files_copied > 0 else False
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la copie des fichiers: {str(e)}")
        return False


def force_download_model(model_name):
    """Force le t√©l√©chargement d'un mod√®le sp√©cifique en effectuant un appel √† Surya"""
    try:
        # Nous devons importer les modules ici car ils peuvent avoir des d√©pendances
        # qui ne sont pas install√©es si on ex√©cute ce script seul
        logger.info(f"üîÑ For√ßage du t√©l√©chargement du mod√®le {model_name}...")

        if model_name == "text_detection":
            from surya.detection.loader import DetectionModelLoader

            loader = DetectionModelLoader()
            loader.model()
            logger.info(f"‚úÖ Mod√®le {model_name} t√©l√©charg√© avec succ√®s")
            return True
        elif model_name == "inline_math_detection":
            from surya.detection.loader import InlineDetectionModelLoader

            loader = InlineDetectionModelLoader()
            loader.model()
            logger.info(f"‚úÖ Mod√®le {model_name} t√©l√©charg√© avec succ√®s")
            return True
        elif model_name == "text_recognition":
            from surya.recognition.loader import RecognitionModelLoader

            loader = RecognitionModelLoader()
            loader.model()
            logger.info(f"‚úÖ Mod√®le {model_name} t√©l√©charg√© avec succ√®s")
            return True
        elif model_name == "layout":
            from surya.layout.loader import LayoutModelLoader

            loader = LayoutModelLoader()
            loader.model()
            logger.info(f"‚úÖ Mod√®le {model_name} t√©l√©charg√© avec succ√®s")
            return True
        elif model_name == "table_recognition":
            from surya.table_rec.loader import TableRecModelLoader

            loader = TableRecModelLoader()
            loader.model()
            logger.info(f"‚úÖ Mod√®le {model_name} t√©l√©charg√© avec succ√®s")
            return True
        elif model_name == "texify":
            from surya.texify.loader import TexifyModelLoader

            loader = TexifyModelLoader()
            loader.model()
            logger.info(f"‚úÖ Mod√®le {model_name} t√©l√©charg√© avec succ√®s")
            return True
        elif model_name == "ocr_error_detection":
            from surya.ocr_error.loader import OCRErrorModelLoader

            loader = OCRErrorModelLoader()
            loader.model()
            logger.info(f"‚úÖ Mod√®le {model_name} t√©l√©charg√© avec succ√®s")
            return True
        else:
            logger.warning(
                f"‚ö†Ô∏è Mod√®le {model_name} non support√© pour le t√©l√©chargement forc√©"
            )
            return False
    except ImportError as e:
        logger.error(f"‚ùå Module Surya non install√© ou incomplet: {str(e)}")
        return False
    except Exception as e:
        logger.error(
            f"‚ùå Erreur lors du t√©l√©chargement forc√© du mod√®le {model_name}: {str(e)}"
        )
        return False


def main():
    """Fonction principale pour g√©rer les mod√®les offline"""
    # Charger les variables d'environnement
    load_dotenv("config.env")

    # Cr√©er les r√©pertoires de base s'ils n'existent pas
    offline_dir = Path("offline_models")
    ensure_directory_exists(offline_dir)

    # R√©pertoire de base pour les mod√®les marker
    base_dir = Path(os.getenv("MARKER_DIR", "offline_models/marker"))
    ensure_directory_exists(base_dir)

    # S'assurer que le r√©pertoire des logs existe
    ensure_directory_exists("logs")

    # V√©rifier si le r√©pertoire de cache Datalab existe
    if not DATALAB_CACHE_DIR.exists():
        logger.warning(
            f"‚ö†Ô∏è Le r√©pertoire de cache Datalab {DATALAB_CACHE_DIR} n'existe pas"
        )
        logger.info(
            "üîÑ Vous devez ex√©cuter Surya au moins une fois pour qu'il t√©l√©charge les mod√®les"
        )
        return False

    # Analyser les arguments de ligne de commande
    import argparse

    parser = argparse.ArgumentParser(
        description="Gestionnaire de mod√®les offline pour Marker/Surya"
    )
    parser.add_argument(
        "--capture",
        action="store_true",
        help="Capturer les mod√®les du cache Datalab vers offline_models",
    )
    parser.add_argument(
        "--force-download",
        action="store_true",
        help="Forcer le t√©l√©chargement des mod√®les manquants",
    )
    parser.add_argument(
        "--check", action="store_true", help="V√©rifier l'int√©grit√© des mod√®les locaux"
    )
    parser.add_argument(
        "--models",
        type=str,
        default="all",
        help="Liste des mod√®les √† traiter, s√©par√©s par des virgules (d√©faut: all)",
    )
    args = parser.parse_args()

    # Si aucune action n'est sp√©cifi√©e, afficher l'aide
    if not (args.capture or args.force_download or args.check):
        parser.print_help()
        return False

    # D√©terminer la liste des mod√®les √† traiter
    models_to_process = (
        list(SURYA_MODELS.keys()) if args.models == "all" else args.models.split(",")
    )

    # V√©rifier l'int√©grit√© des mod√®les locaux
    if args.check:
        logger.info("üîç V√©rification de l'int√©grit√© des mod√®les locaux...")
        valid_models = []
        missing_models = []

        for model_name in models_to_process:
            if model_name not in SURYA_MODELS:
                logger.warning(f"‚ö†Ô∏è Mod√®le {model_name} inconnu, ignor√©")
                continue

            model_info = SURYA_MODELS[model_name]
            target_dir = base_dir / model_info["target_folder"]

            is_valid, message = check_model_directory(target_dir)
            if is_valid:
                logger.info(f"‚úÖ Mod√®le {model_name} est valide: {message}")
                valid_models.append(model_name)
            else:
                logger.warning(f"‚ö†Ô∏è Mod√®le {model_name} est invalide: {message}")
                missing_models.append(model_name)

        logger.info(
            f"üìä R√©sum√©: {len(valid_models)}/{len(models_to_process)} mod√®les valides"
        )
        if missing_models:
            logger.warning(
                f"‚ö†Ô∏è Mod√®les manquants ou invalides: {', '.join(missing_models)}"
            )

    # Capturer les mod√®les du cache Datalab vers offline_models
    if args.capture:
        logger.info("üîÑ Capture des mod√®les du cache Datalab vers offline_models...")
        captured_models = []
        failed_models = []

        for model_name in models_to_process:
            if model_name not in SURYA_MODELS:
                logger.warning(f"‚ö†Ô∏è Mod√®le {model_name} inconnu, ignor√©")
                continue

            model_info = SURYA_MODELS[model_name]
            cache_version_dir = model_info["cache_path"] / model_info["version_folder"]
            target_dir = base_dir / model_info["target_folder"]

            if not cache_version_dir.exists():
                logger.warning(
                    f"‚ö†Ô∏è Mod√®le {model_name} n'existe pas dans le cache: {cache_version_dir}"
                )
                failed_models.append(model_name)
                continue

            success = copy_model_files(cache_version_dir, target_dir)
            if success:
                logger.info(f"‚úÖ Mod√®le {model_name} captur√© avec succ√®s")
                captured_models.append(model_name)
            else:
                logger.error(f"‚ùå √âchec de la capture du mod√®le {model_name}")
                failed_models.append(model_name)

        logger.info(
            f"üìä R√©sum√©: {len(captured_models)}/{len(models_to_process)} mod√®les captur√©s"
        )
        if failed_models:
            logger.warning(f"‚ö†Ô∏è Mod√®les non captur√©s: {', '.join(failed_models)}")

    # Forcer le t√©l√©chargement des mod√®les manquants
    if args.force_download:
        logger.info("üîÑ T√©l√©chargement forc√© des mod√®les manquants...")

        # On v√©rifie d'abord quels mod√®les sont manquants ou invalides
        models_to_download = []
        for model_name in models_to_process:
            if model_name not in SURYA_MODELS:
                logger.warning(f"‚ö†Ô∏è Mod√®le {model_name} inconnu, ignor√©")
                continue

            model_info = SURYA_MODELS[model_name]
            target_dir = base_dir / model_info["target_folder"]

            is_valid, message = check_model_directory(target_dir)
            if not is_valid:
                logger.info(f"üîÑ Mod√®le {model_name} sera t√©l√©charg√©: {message}")
                models_to_download.append(model_name)
            else:
                logger.info(f"‚è≠Ô∏è Mod√®le {model_name} existe d√©j√† et est valide")

        # T√©l√©charger les mod√®les manquants
        downloaded_models = []
        failed_downloads = []

        for model_name in models_to_download:
            success = force_download_model(model_name)
            if success:
                # Apr√®s le t√©l√©chargement, on capture du cache vers offline_models
                model_info = SURYA_MODELS[model_name]
                cache_version_dir = (
                    model_info["cache_path"] / model_info["version_folder"]
                )
                target_dir = base_dir / model_info["target_folder"]

                if cache_version_dir.exists():
                    copy_success = copy_model_files(cache_version_dir, target_dir)
                    if copy_success:
                        logger.info(
                            f"‚úÖ Mod√®le {model_name} t√©l√©charg√© et captur√© avec succ√®s"
                        )
                        downloaded_models.append(model_name)
                    else:
                        logger.error(
                            f"‚ùå √âchec de la capture du mod√®le {model_name} apr√®s t√©l√©chargement"
                        )
                        failed_downloads.append(model_name)
                else:
                    logger.error(
                        f"‚ùå Mod√®le {model_name} t√©l√©charg√© mais non trouv√© dans le cache"
                    )
                    failed_downloads.append(model_name)
            else:
                logger.error(f"‚ùå √âchec du t√©l√©chargement du mod√®le {model_name}")
                failed_downloads.append(model_name)

        logger.info(
            f"üìä R√©sum√©: {len(downloaded_models)}/{len(models_to_download)} mod√®les t√©l√©charg√©s et captur√©s"
        )
        if failed_downloads:
            logger.warning(f"‚ö†Ô∏è Mod√®les non t√©l√©charg√©s: {', '.join(failed_downloads)}")

    return True


if __name__ == "__main__":
    # S'assurer que le r√©pertoire des logs existe
    Path("./logs").mkdir(exist_ok=True)

    success = main()
    sys.exit(0 if success else 1)

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de t√©l√©chargement des mod√®les marker pour l'extraction PDF.
Ce script t√©l√©charge les mod√®les depuis Hugging Face et les stocke dans le r√©pertoire configur√©.
"""

import logging
import os
import shutil
import sys
from pathlib import Path

from dotenv import load_dotenv

# Configuration du logger
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("./logs/download_marker_models.log"),
    ],
)
logger = logging.getLogger("download_marker")


def ensure_directory_exists(directory):
    """S'assure qu'un r√©pertoire existe, le cr√©e sinon"""
    Path(directory).mkdir(parents=True, exist_ok=True)
    logger.info(f"‚úÖ R√©pertoire v√©rifi√©: {directory}")


def check_model_directory(directory):
    """V√©rifie si un r√©pertoire de mod√®le contient des fichiers valides"""
    path = Path(directory)
    if not path.exists():
        return False, "Le r√©pertoire n'existe pas"

    # V√©rifier s'il y a des fichiers dans le r√©pertoire
    files = list(path.glob("*"))
    if not files:
        return False, "Le r√©pertoire est vide"

    # V√©rifier s'il y a des fichiers mod√®les sp√©cifiques
    model_files = (
        list(path.glob("*.safetensors"))
        + list(path.glob("*.bin"))
        + list(path.glob("*.pt"))
    )
    config_files = list(path.glob("config.json")) + list(
        path.glob("preprocessor_config.json")
    )

    if not model_files and not config_files:
        return (
            False,
            "Aucun fichier mod√®le trouv√© (.safetensors, .bin, .pt, config.json)",
        )

    # Le mod√®le semble valide
    return True, f"{len(model_files) + len(config_files)} fichiers mod√®le trouv√©s"


def main():
    """Fonction principale pour t√©l√©charger les mod√®les marker"""
    # Charger les variables d'environnement
    load_dotenv("config.env")

    # Cr√©er d'abord le r√©pertoire offline_models de base s'il n'existe pas
    offline_dir = Path("offline_models")
    ensure_directory_exists(offline_dir)

    # R√©pertoire de base pour les mod√®les marker
    base_dir = Path(os.getenv("MARKER_DIR", "offline_models/marker"))
    ensure_directory_exists(base_dir)

    # S'assurer que le r√©pertoire des logs existe
    ensure_directory_exists("logs")

    try:
        # Installer huggingface_hub si n√©cessaire
        try:
            import huggingface_hub

            logger.info(
                f"Module huggingface_hub import√© avec succ√®s (version: {huggingface_hub.__version__})"
            )
        except ImportError:
            logger.warning("‚ùå Module huggingface_hub non trouv√©. Installation...")
            import subprocess

            subprocess.check_call(
                [sys.executable, "-m", "pip", "install", "huggingface_hub"]
            )
            import huggingface_hub

            logger.info(
                f"‚úÖ Module huggingface_hub install√© avec succ√®s (version: {huggingface_hub.__version__})"
            )

        from huggingface_hub import snapshot_download

        # Cr√©er les r√©pertoires pour chaque mod√®le
        model_dirs = {
            "layout": base_dir / "layout",
            "texify": base_dir / "texify",
        }

        # D√©p√¥ts corrects des mod√®les sur Hugging Face pour Marker
        model_repos = {
            "layout": "VikParuchuri/marker_layout_segmenter",
            "texify": "VikParuchuri/marker_texify",
        }

        # Cr√©er les r√©pertoires s'ils n'existent pas
        for dir_path in model_dirs.values():
            ensure_directory_exists(dir_path)

        # V√©rifier d'abord si les mod√®les sont d√©j√† t√©l√©charg√©s
        already_downloaded = {}
        for model_name, dir_path in model_dirs.items():
            is_valid, message = check_model_directory(dir_path)
            already_downloaded[model_name] = is_valid
            if is_valid:
                logger.info(f"‚úÖ Le mod√®le {model_name} est d√©j√† t√©l√©charg√©: {message}")
            else:
                logger.info(
                    f"üîÑ Le mod√®le {model_name} doit √™tre t√©l√©charg√©: {message}"
                )

        # Note sur les mod√®les Surya
        logger.info(
            "‚ÑπÔ∏è Les mod√®les de reconnaissance (text_recognition, table_recognition, text_detection, inline_math_detection) "
        )
        logger.info(
            "‚ÑπÔ∏è ne sont pas t√©l√©charg√©s automatiquement car ils ne sont pas disponibles s√©par√©ment sur Hugging Face."
        )
        logger.info(
            "‚ÑπÔ∏è Ces mod√®les sont inclus dans le package Surya et seront t√©l√©charg√©s automatiquement lors de l'utilisation."
        )

        # Compter les mod√®les r√©ussis
        success_count = 0

        # T√©l√©charger chaque mod√®le
        logger.info(
            "üîÑ D√©but du t√©l√©chargement des mod√®les marker depuis Hugging Face..."
        )
        for model_name, repo_id in model_repos.items():
            # Sauter le t√©l√©chargement si le mod√®le est d√©j√† pr√©sent
            if already_downloaded.get(model_name, False):
                logger.info(f"‚è≠Ô∏è Mod√®le {model_name} d√©j√† t√©l√©charg√©, ignor√©")
                success_count += 1
                continue

            logger.info(f"üîÑ T√©l√©chargement du mod√®le {model_name} depuis {repo_id}...")
            try:
                # T√©l√©charger le mod√®le
                local_path = snapshot_download(
                    repo_id=repo_id,
                    local_dir=str(model_dirs[model_name]),
                    local_dir_use_symlinks=False,
                )
                logger.info(
                    f"‚úÖ Mod√®le {model_name} t√©l√©charg√© avec succ√®s dans {local_path}"
                )
                success_count += 1
            except Exception as e:
                logger.error(
                    f"‚ùå Erreur lors du t√©l√©chargement du mod√®le {model_name}: {str(e)}"
                )

                # Nettoyer le r√©pertoire en cas d'√©chec pour permettre une nouvelle tentative
                try:
                    shutil.rmtree(model_dirs[model_name])
                    ensure_directory_exists(model_dirs[model_name])
                    logger.info(
                        f"üßπ R√©pertoire du mod√®le {model_name} nettoy√© pour future tentative"
                    )
                except Exception as clean_error:
                    logger.error(
                        f"‚ùå Erreur lors du nettoyage du r√©pertoire {model_name}: {str(clean_error)}"
                    )

        # V√©rification finale des mod√®les t√©l√©charg√©s
        missing_models = []
        for model_name, dir_path in model_dirs.items():
            is_valid, message = check_model_directory(dir_path)
            if not is_valid:
                missing_models.append(model_name)
                logger.warning(
                    f"‚ö†Ô∏è Le mod√®le {model_name} n'a pas √©t√© correctement t√©l√©charg√©: {message}"
                )
            else:
                logger.info(
                    f"‚úÖ Le mod√®le {model_name} a √©t√© correctement t√©l√©charg√©: {message}"
                )

        # R√©sum√©
        if success_count == len(model_repos):
            logger.info(
                f"‚úÖ Tous les mod√®les marker ({len(model_repos)}) ont √©t√© t√©l√©charg√©s avec succ√®s"
            )
            return True
        elif success_count > 0:
            logger.warning(
                f"‚ö†Ô∏è {success_count}/{len(model_repos)} mod√®les marker t√©l√©charg√©s avec succ√®s"
            )
            logger.warning(f"‚ö†Ô∏è Mod√®les manquants: {missing_models}")
            return True  # Succ√®s partiel si au moins un mod√®le a √©t√© t√©l√©charg√©
        else:
            logger.error(f"‚ùå Aucun mod√®le n'a pu √™tre t√©l√©charg√©")
            return False

    except Exception as e:
        logger.error(f"‚ùå Erreur lors du t√©l√©chargement des mod√®les marker: {str(e)}")
        return False


if __name__ == "__main__":
    # S'assurer que le r√©pertoire des logs existe
    Path("./logs").mkdir(exist_ok=True)

    success = main()
    sys.exit(0 if success else 1)

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de t√©l√©chargement de tous les mod√®les pour l'utilisation hors ligne.
Ce script t√©l√©charge:
1. Les mod√®les d'embeddings (BAAI/bge-m3, sentence-transformers/all-MiniLM-L6-v2)
2. Les mod√®les marker pour l'extraction de PDF
3. Les ressources NLTK si n√©cessaire
4. Autres d√©pendances n√©cessaires pour le fonctionnement hors ligne
"""

import os
import sys
import subprocess
import importlib.util
import logging
from pathlib import Path
from dotenv import load_dotenv, set_key

# Ajouter le r√©pertoire parent au PYTHONPATH pour importer les modules du projet
sys.path.insert(0, str(Path(__file__).resolve().parent.parent))

# Configuration du logger pour ce script
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("./logs/download_all_models.log"),
    ],
)
logger = logging.getLogger("download_all_models")

def ensure_directory_exists(directory):
    """S'assure qu'un r√©pertoire existe, le cr√©e sinon"""
    Path(directory).mkdir(parents=True, exist_ok=True)
    logger.info(f"‚úÖ R√©pertoire v√©rifi√©: {directory}")

def update_env_file(file_path, key, value):
    """Met √† jour une variable dans un fichier .env"""
    try:
        # Charger le fichier
        with open(file_path, 'r') as file:
            lines = file.readlines()
        
        # Chercher et modifier la ligne correspondante
        updated = False
        for i, line in enumerate(lines):
            if line.strip() and not line.strip().startswith('#'):
                if line.split('=')[0].strip() == key:
                    lines[i] = f'{key}="{value}"\n'
                    updated = True
                    break
        
        # Si la cl√© n'existe pas, l'ajouter
        if not updated:
            lines.append(f'{key}="{value}"\n')
        
        # √âcrire les modifications
        with open(file_path, 'w') as file:
            file.writelines(lines)
        
        logger.info(f"‚úÖ Fichier {file_path} mis √† jour: {key}={value}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la mise √† jour de {file_path}: {str(e)}")
        return False

def download_embeddings_models():
    """T√©l√©charge les mod√®les d'embeddings"""
    logger.info("üîÑ T√©l√©chargement des mod√®les d'embeddings...")
    
    try:
        # Importer la classe TextVectorizer
        from document_processing.text_vectorizer import TextVectorizer
        
        # T√©l√©charger tous les mod√®les d'embeddings
        result = TextVectorizer.download_models_for_offline_use(all_models=True)
        
        # V√©rifier le r√©sultat
        success_count = sum(1 for v in result.values() if v)
        if success_count == len(result):
            logger.info(f"‚úÖ Tous les mod√®les d'embeddings ({len(result)}) t√©l√©charg√©s avec succ√®s")
            for model, status in result.items():
                logger.info(f"  - {model}: {'‚úÖ' if status else '‚ùå'}")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è {success_count}/{len(result)} mod√®les d'embeddings t√©l√©charg√©s")
            for model, status in result.items():
                logger.info(f"  - {model}: {'‚úÖ' if status else '‚ùå'}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du t√©l√©chargement des mod√®les d'embeddings: {str(e)}")
        return False

def download_marker_models():
    """T√©l√©charge les mod√®les marker pour l'extraction de PDF"""
    logger.info("üîÑ T√©l√©chargement des mod√®les marker...")
    
    try:
        # V√©rifier si le script marker existe
        marker_script = Path("scripts/download_marker_models.py")
        if marker_script.exists():
            # Ex√©cuter le script marker
            logger.info("Ex√©cution du script download_marker_models.py")
            result = subprocess.run(
                [sys.executable, str(marker_script)],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                logger.info("‚úÖ Mod√®les marker t√©l√©charg√©s avec succ√®s")
                return True
            else:
                logger.error(f"‚ùå Erreur lors du t√©l√©chargement des mod√®les marker: {result.stderr}")
                return False
        else:
            # Script shell comme alternative
            marker_shell = Path("scripts/download_marker_models.sh")
            if marker_shell.exists():
                logger.info("Ex√©cution du script download_marker_models.sh")
                result = subprocess.run(
                    ["bash", str(marker_shell)],
                    capture_output=True,
                    text=True
                )
                
                if result.returncode == 0:
                    logger.info("‚úÖ Mod√®les marker t√©l√©charg√©s avec succ√®s (via shell)")
                    return True
                else:
                    logger.error(f"‚ùå Erreur lors du t√©l√©chargement des mod√®les marker (via shell): {result.stderr}")
                    return False
            else:
                # Cr√©er un script simple pour t√©l√©charger les mod√®les marker
                logger.info("Cr√©ation d'un script temporaire pour t√©l√©charger les mod√®les marker")
                
                # Cr√©er un r√©pertoire pour les mod√®les marker
                load_dotenv("config.env")
                marker_dir = Path(os.getenv("MARKER_DIR", "offline_models/marker"))
                ensure_directory_exists(marker_dir)
                
                # Cr√©er un script Python temporaire pour t√©l√©charger les mod√®les
                temp_script = """
import os
import sys
from pathlib import Path

# Configurer l'environnement
marker_dir = Path("{marker_dir}")
marker_dir.mkdir(parents=True, exist_ok=True)
os.environ["MARKER_BASE_PATH"] = str(marker_dir)

try:
    from marker import download_models
    download_models()
    print("‚úÖ Mod√®les marker t√©l√©charg√©s avec succ√®s")
    sys.exit(0)
except Exception as e:
    print(f"‚ùå Erreur: {{str(e)}}")
    sys.exit(1)
""".format(marker_dir=marker_dir)
                
                # √âcrire le script temporaire
                temp_script_path = Path("./temp_download_marker.py")
                with open(temp_script_path, "w") as f:
                    f.write(temp_script)
                
                # Ex√©cuter le script temporaire
                result = subprocess.run(
                    [sys.executable, str(temp_script_path)],
                    capture_output=True,
                    text=True
                )
                
                # Supprimer le script temporaire
                if temp_script_path.exists():
                    temp_script_path.unlink()
                
                if result.returncode == 0:
                    logger.info("‚úÖ Mod√®les marker t√©l√©charg√©s avec succ√®s (via script temporaire)")
                    logger.info(result.stdout)
                    return True
                else:
                    logger.error(f"‚ùå Erreur lors du t√©l√©chargement des mod√®les marker: {result.stderr}")
                    return False
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du t√©l√©chargement des mod√®les marker: {str(e)}")
        return False

def download_nltk_models():
    """T√©l√©charge les mod√®les NLTK n√©cessaires"""
    logger.info("üîÑ T√©l√©chargement des mod√®les NLTK...")
    
    try:
        # V√©rifier si le script NLTK existe
        nltk_script = Path("scripts/download_nltk_models.py")
        if nltk_script.exists():
            # Ex√©cuter le script NLTK
            result = subprocess.run(
                [sys.executable, str(nltk_script)],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                logger.info("‚úÖ Mod√®les NLTK t√©l√©charg√©s avec succ√®s")
                return True
            else:
                logger.error(f"‚ùå Erreur lors du t√©l√©chargement des mod√®les NLTK: {result.stderr}")
                return False
        else:
            # T√©l√©charger manuellement
            logger.info("Script download_nltk_models.py non trouv√©, t√©l√©chargement manuel...")
            
            try:
                import nltk
                nltk_data_dir = Path('offline_models/nltk_data')
                ensure_directory_exists(nltk_data_dir)
                
                # D√©finir le chemin de donn√©es NLTK
                nltk.data.path.insert(0, str(nltk_data_dir))
                
                # T√©l√©charger les ressources essentielles
                resources = ['punkt', 'stopwords', 'wordnet', 'averaged_perceptron_tagger']
                for resource in resources:
                    nltk.download(resource, download_dir=str(nltk_data_dir))
                
                logger.info("‚úÖ Mod√®les NLTK t√©l√©charg√©s manuellement avec succ√®s")
                return True
            except ImportError:
                logger.error("‚ùå La biblioth√®que nltk n'est pas install√©e")
                logger.info("üí° Installation: pip install nltk")
                return False
            except Exception as e:
                logger.error(f"‚ùå Erreur lors du t√©l√©chargement manuel des mod√®les NLTK: {str(e)}")
                return False
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du t√©l√©chargement des mod√®les NLTK: {str(e)}")
        return False

def update_config_files():
    """Met √† jour les fichiers de configuration"""
    logger.info("üîÑ Mise √† jour des fichiers de configuration...")
    
    # Mise √† jour de config.env
    config_updates = {
        "USE_OFFLINE_MODELS": "true",
    }
    
    for key, value in config_updates.items():
        update_env_file("config.env", key, value)
    
    # V√©rifier que tous les r√©pertoires mentionn√©s dans config.env existent
    load_dotenv("config.env")
    directories = [
        os.getenv("CACHE_DIR", "offline_models/embeddings_cache"),
        os.getenv("MODELS_DIR", "offline_models/hf"),
        os.getenv("MARKER_DIR", "offline_models/marker"),
        os.getenv("EMBEDDINGS_DIR", "offline_models/embeddings"),
    ]
    
    for directory in directories:
        ensure_directory_exists(directory)
    
    # S'assurer que le r√©pertoire des logs existe
    ensure_directory_exists("logs")
    
    logger.info("‚úÖ Fichiers de configuration mis √† jour")
    return True

def main():
    """Fonction principale"""
    logger.info("üöÄ D√©marrage du t√©l√©chargement de tous les mod√®les pour utilisation hors ligne")
    
    # 1. Mettre √† jour les fichiers de configuration
    update_config_files()
    
    # 2. T√©l√©charger les mod√®les d'embeddings
    embeddings_success = download_embeddings_models()
    
    # 3. T√©l√©charger les mod√®les marker
    marker_success = download_marker_models()
    
    # 4. T√©l√©charger les mod√®les NLTK
    nltk_success = download_nltk_models()
    
    # R√©sum√©
    logger.info("\nüìã R√©sum√© du t√©l√©chargement:")
    logger.info(f"  - Mod√®les d'embeddings: {'‚úÖ' if embeddings_success else '‚ùå'}")
    logger.info(f"  - Mod√®les marker: {'‚úÖ' if marker_success else '‚ùå (optionnel)'}")
    logger.info(f"  - Mod√®les NLTK: {'‚úÖ' if nltk_success else '‚ùå'}")
    
    # Conclusion
    # Consid√©rer les mod√®les marker comme optionnels
    if embeddings_success and nltk_success:
        if not marker_success:
            logger.warning("‚ö†Ô∏è Les mod√®les marker n'ont pas √©t√© t√©l√©charg√©s, mais ils sont optionnels")
            logger.info("üí° Vous pouvez les t√©l√©charger manuellement si n√©cessaire")
        logger.info("‚úÖ Les mod√®les essentiels ont √©t√© t√©l√©charg√©s avec succ√®s")
        logger.info("üéâ L'application est pr√™te √† fonctionner en mode hors ligne!")
        return True
    else:
        logger.warning("‚ö†Ô∏è Certains mod√®les essentiels n'ont pas √©t√© t√©l√©charg√©s correctement")
        logger.info("üí° Consultez les logs pour plus de d√©tails")
        return False

if __name__ == "__main__":
    # Cr√©er le r√©pertoire de logs s'il n'existe pas
    Path("./logs").mkdir(exist_ok=True)
    
    success = main()
    sys.exit(0 if success else 1) 